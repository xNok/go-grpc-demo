// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotesClient is the client API for Notes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotesClient interface {
	// Saving a note
	Save(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteSaveReply, error)
	// Retriving a note
	Load(ctx context.Context, in *NoteSearch, opts ...grpc.CallOption) (*Note, error)
	// Save a note via Streaming
	SaveLargeNote(ctx context.Context, opts ...grpc.CallOption) (Notes_SaveLargeNoteClient, error)
}

type notesClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesClient(cc grpc.ClientConnInterface) NotesClient {
	return &notesClient{cc}
}

func (c *notesClient) Save(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteSaveReply, error) {
	out := new(NoteSaveReply)
	err := c.cc.Invoke(ctx, "/notes.Notes/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) Load(ctx context.Context, in *NoteSearch, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/notes.Notes/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) SaveLargeNote(ctx context.Context, opts ...grpc.CallOption) (Notes_SaveLargeNoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notes_ServiceDesc.Streams[0], "/notes.Notes/SaveLargeNote", opts...)
	if err != nil {
		return nil, err
	}
	x := &notesSaveLargeNoteClient{stream}
	return x, nil
}

type Notes_SaveLargeNoteClient interface {
	Send(*Note) error
	CloseAndRecv() (*NoteSaveReply, error)
	grpc.ClientStream
}

type notesSaveLargeNoteClient struct {
	grpc.ClientStream
}

func (x *notesSaveLargeNoteClient) Send(m *Note) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notesSaveLargeNoteClient) CloseAndRecv() (*NoteSaveReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NoteSaveReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotesServer is the server API for Notes service.
// All implementations must embed UnimplementedNotesServer
// for forward compatibility
type NotesServer interface {
	// Saving a note
	Save(context.Context, *Note) (*NoteSaveReply, error)
	// Retriving a note
	Load(context.Context, *NoteSearch) (*Note, error)
	// Save a note via Streaming
	SaveLargeNote(Notes_SaveLargeNoteServer) error
	mustEmbedUnimplementedNotesServer()
}

// UnimplementedNotesServer must be embedded to have forward compatible implementations.
type UnimplementedNotesServer struct {
}

func (UnimplementedNotesServer) Save(context.Context, *Note) (*NoteSaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedNotesServer) Load(context.Context, *NoteSearch) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedNotesServer) SaveLargeNote(Notes_SaveLargeNoteServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveLargeNote not implemented")
}
func (UnimplementedNotesServer) mustEmbedUnimplementedNotesServer() {}

// UnsafeNotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotesServer will
// result in compilation errors.
type UnsafeNotesServer interface {
	mustEmbedUnimplementedNotesServer()
}

func RegisterNotesServer(s grpc.ServiceRegistrar, srv NotesServer) {
	s.RegisterService(&Notes_ServiceDesc, srv)
}

func _Notes_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notes.Notes/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Save(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notes.Notes/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Load(ctx, req.(*NoteSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_SaveLargeNote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotesServer).SaveLargeNote(&notesSaveLargeNoteServer{stream})
}

type Notes_SaveLargeNoteServer interface {
	SendAndClose(*NoteSaveReply) error
	Recv() (*Note, error)
	grpc.ServerStream
}

type notesSaveLargeNoteServer struct {
	grpc.ServerStream
}

func (x *notesSaveLargeNoteServer) SendAndClose(m *NoteSaveReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notesSaveLargeNoteServer) Recv() (*Note, error) {
	m := new(Note)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Notes_ServiceDesc is the grpc.ServiceDesc for Notes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes.Notes",
	HandlerType: (*NotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Notes_Save_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Notes_Load_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveLargeNote",
			Handler:       _Notes_SaveLargeNote_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "notes/notes.proto",
}
